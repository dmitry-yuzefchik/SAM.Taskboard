@using System.Security.Claims;
@{
    var identity = (ClaimsIdentity)User.Identity;
    IEnumerable<Claim> claims = identity.Claims;
    string theme = claims.FirstOrDefault(u => u.Type == "Theme").Value;
}

@model SAM.Taskboard.Model.Task.CreateTaskViewModel

<div id="modalForm" class="modal-dialog modal-lg modal-dialog-centered" role="document">
    <div class="modal-content theme-background-@theme">

        @using (Html.BeginForm("CreateTask", "Task", FormMethod.Post, new { id = "addTaskColumn", enctype = "multipart/form-data" }))
        {
            <div class="modal-body theme-background-@theme">

                <div class="d-flex flex-row justify-content-around w-100 h-100">
                    @Html.HiddenFor(m => m.ProjectId)
                    @Html.HiddenFor(m => m.BoardId)
                    @Html.HiddenFor(m => m.ColumnId)

                    <div class="container w-75">
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    @Html.TextBoxFor(m => m.Title, new { type = "text", @class = $"form-control theme-background-{theme} textOnDark-{theme}", placeholder = "Task name" })
                                    @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger small" })
                                </div>
                            </div>
                        </div>

                        <div class="row h-50">
                            <div class="col h-100">
                                <div class="form-group h-100">
                                    @Html.TextAreaFor(m => m.Content, new { type = "text", @class = $"form-control h-100 theme-background-{theme} textOnDark-{theme}", placeholder = "Task description" })
                                    @Html.ValidationMessageFor(m => m.Content, "", new { @class = "text-danger small" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col">
                                <div id="files" class="form-group">
                                    <label class="pt-2 textOnDark-@theme">Attachments</label>
                                    <div id="dropArea" class="rounded" ondrop="dropFile(event)" ondragover="dragOverHandler(event)">
                                        <span class="textOnDark-@theme">Drop your files here.</span><br>
                                        <span class="textOnDark-@theme small"> Allowed formats: png, jpg, doc, docx, txt, xls, rtf, zip</span><br>
                                        <span class="textOnDark-@theme small"> Maximum 5 files </span>
                                    </div>
                                    <div class="pl-2 row textOnDark-@theme" id="uploadList"></div>

                                    <input style="visibility: hidden" id="fileSelect" type="file" name="attachment"/>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="container w-25">
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label class="textOnDark-@theme">Type</label>
                                    @Html.DropDownListFor(m => m.Type, new SelectList(Enum.GetValues(typeof(SAM.Taskboard.Model.TaskType))), new { type = "text", @class = $"form-control theme-background-{theme} textOnDark-{theme}" })
                                    @Html.ValidationMessageFor(m => m.Type, "", new { @class = "text-danger small" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label class="textOnDark-@theme">Severity</label>
                                    @Html.DropDownListFor(m => m.Severity, new SelectList(Enum.GetValues(typeof(SAM.Taskboard.Model.Severity))), new { type = "text", @class = $"form-control theme-background-{theme} textOnDark-{theme}" })
                                    @Html.ValidationMessageFor(m => m.Severity, "", new { @class = "text-danger small" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label class="textOnDark-@theme">Priority</label>
                                    @Html.DropDownListFor(m => m.Priority, new SelectList(Enum.GetValues(typeof(SAM.Taskboard.Model.Priority))), new { type = "text", @class = $"form-control theme-background-{theme} textOnDark-{theme}" })
                                    @Html.ValidationMessageFor(m => m.Priority, "", new { @class = "text-danger small" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label class="textOnDark-@theme">Assignee</label>
                                    @Html.DropDownListFor(m => m.AssigneeId, Enumerable.Empty<SelectListItem>(), new { type = "text", @class = $"form-control theme-background-{theme} textOnDark-{theme}" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-footer theme-background-@theme theme-border-@theme">
                <button id="closeModal" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="createTask" type="submit" class="btn btn-primary">Create</button>
                <div class="row justify-content-center mt-1 mb-2 text-danger small">
                    @Html.ValidationMessage("Error")
                </div>
            </div>
        }
    </div>

<script>
    $('#createTask').click(function (event) {
        event.preventDefault();
        const formData = new FormData($('form')[1]);

        for (let i = 0; i < filesToUpload.length; i++) {
            let file = filesToUpload[i];
            formData.append('Attachments', file, file.name);
        }

        const title = $('#addTaskColumn').find('#Title').val();
        const columnId = $('#addTaskColumn').find('#ColumnId').val();
        const projectId = $('#addTaskColumn').find('#ProjectId').val();
        const assigneeId = $('#addTaskColumn').find('#AssigneeId').val();
        const boardId = $('#addTaskColumn').find('#BoardId').val();
        formData.set('Title', title);
        formData.set('ColumnId', columnId);
        formData.set('ProjectId', projectId);
        formData.set('AssigneeId', assigneeId);
        formData.set('BoardId', boardId);



        const request = $.ajax({
            type: "POST",
            url: '@Url.Action("CreateTask", "Task")',
            data: formData,
            processData: false,
            contentType: false
        });

        request.done(function (result) {
            $(".modal-backdrop").remove();
            filesToUpload = [];
            sendSortRequest();
        });

        request.fail(function (jqXHR) {
            if (jqXHR.status == 400) {
                clearFiles();
                $("#modalForm").replaceWith(jqXHR.responseText);
                loadProjectUsers(projectId);
            }
        });
    });

    function loadProjectUsers(projectId) {
        const modal = $(this);

        const request = $.ajax({
            type: 'GET',
            url: '@Url.Action("GetProjectUsers", "Project")?projectId=' + projectId
        });

        request.done(function (result) {
            let usersList = [];

            for (let user in result.users) {
                let option = '<option value="' + user + '">' + result.users[user] + '</option>';
                usersList.push(option);
            }

            const emptyAssigneeOption = '<option value=""/>';
            $('#AssigneeId').empty();
            $('#AssigneeId').append(emptyAssigneeOption);
            $('#AssigneeId').append(usersList);
        });

        request.fail(function (jqXHR) {
            if (jqXHR.statusCode == 400) {
                window.location.replace = '@Url.Action("Default", "Error")';
            }

            if (jqXHR.statusCode == 403) {
                window.location.replace = '@Url.Action("Forbidden", "Error")';
            }
        });
    }

    function dropFile(event) {
        event.preventDefault();
        const allowedExtensions = ['png', 'jpg', 'doc', 'docx', 'txt', 'xls', 'rtf', 'zip'];

        if (event.dataTransfer.items) {

            for (let i = 0; i < event.dataTransfer.items.length; i++) {

                if (event.dataTransfer.items[i].kind === 'file') {
                    let file = event.dataTransfer.items[i].getAsFile();
                    let fileExtension = getFileExtension(file.name);

                    if (!allowedExtensions.includes(fileExtension)) {
                        continue;
                    }

                    if (filesToUpload.length > 4) {
                        break;
                    }

                    filesToUpload.push(file);
                    $('#uploadList').append('<li class="attachment-link small">' + file.name + '</li>');
                }
            }

            if (filesToUpload.length > 0) {
                $('#files').find('button').remove();
                $('#uploadList').after('<button type="button" class="btn text-danger" onclick="clearFiles()">Remove all</button>');
            }
        }
    }

    function dragOverHandler(event) {
        event.preventDefault();
    }

    function getFileExtension(fileName) {
        return fileName.split('.').pop();
        }

    function clearFiles() {
        filesToUpload = [];
        $('#uploadList').empty();
        $('#files').find('button').remove();
    }
</script>
</div>
